---
name: Release Next Charts
on:
  push:
    branches:
      - main
jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      HELM_VERSION: 3.5.3
      YQ_VERSION: v4.6.3
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      SHORT_VERSION: ${{ steps.get_short_version.outputs.SHORT_VERSION }}
      HELM_VERSION: ${{ env.HELM_VERSION}}
      YQ_VERSION: ${{ env.YQ_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: scripts/install-helm.sh $HELM_VERSION
      - run: scripts/install-yq.sh $YQ_VERSION
      - name: Update PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Validate tool versions
        run: |
          helm version
          yq -V
      - name: Get the version
        id: get_version
        run: echo "::set-output name=VERSION::${GITHUB_REF:10}"
      - name: Get the short version
        id: get_short_version
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: echo "::set-output name=SHORT_VERSION::${VERSION:1}"

  package:
    needs:
      - setup
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v2
      - run: scripts/install-helm.sh ${{ needs.setup.outputs.HELM_VERSION }}
      - run: scripts/install-yq.sh ${{ needs.setup.outputs.YQ_VERSION }}
      - name: Update PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Update chart dependencies
        run: |
          scripts/update-helm-deps.sh
      - name: Compute release chart version
        id: compute_next_version
        run: |
          DATE_TIME=$(date '+%Y%m%d%H%M%S')
          NEXT_VERSION=$(echo $(yq e '.version' charts/k8ssandra/Chart.yaml) | sed "s/-.*/-${DATE_TIME}-${GITHUB_SHA::8}/")
          echo "Next version is: $NEXT_VERSION"
          echo "::set-output name=NEXT_VERSION::${NEXT_VERSION}"
      - name: Update Helm chart version
        env:
          NEXT_VERSION: ${{ steps.compute_next_version.outputs.NEXT_VERSION }}
        run: |
          yq eval ".version |= \"${NEXT_VERSION}\"" charts/k8ssandra/Chart.yaml -i
          cat charts/k8ssandra/Chart.yaml
      - name: Create working directory and copy charts
        run: |
          mkdir build
          cp -rv charts/* build/
      - name: Generate package archives
        run: |
          ls | while read c; do
            if [[ -d $c ]]; then
              helm package $c
            fi
          done
        working-directory: build
      - name: Archive packages as part of Workflow
        uses: actions/upload-artifact@v2
        with:
          name: charts
          path: build/*.tgz

  helm-release:
    needs:
      - package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: scripts/install-helm.sh ${{ needs.setup.outputs.HELM_VERSION }}
      - run: scripts/install-yq.sh ${{ needs.setup.outputs.YQ_VERSION }}
      - name: Update PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Create build directory
        run: mkdir build
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: charts
          path: build
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Download current index from Google Cloud
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: gsutil cp gs://$GCP_HELM_BUCKET_NAME/next/index.yaml ./
        working-directory: build
      - name: Regenerate Helm index
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: helm repo index . --merge index.yaml --url "https://$GCP_HELM_BUCKET_NAME/next/"
        working-directory: build
      - name: Upload packages and index
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: |
          gsutil cp ./*.tgz gs://$GCP_HELM_BUCKET_NAME/next/
          gsutil cp ./index.yaml gs://$GCP_HELM_BUCKET_NAME/next/
        working-directory: build

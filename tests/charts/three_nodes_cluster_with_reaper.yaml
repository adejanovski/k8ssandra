cassandra:
  version: "3.11.10"

  versionImageMap:
    3.11.10: datastax/cassandra-mgmtapi-3_11_10:v0.1.19

  clusterName: k8ssandra
  auth:
    enabled: false
    superuser:
      secret: "cassandra"
      username: "cassandra"

  cassandraLibDirVolume:
    storageClass: standard
    size: 5Gi

  allowMultipleNodesPerWorker: false

  heap:
   size: 500M
   newGenSize: 200M

  resources: {}
  datacenters:
  - 
    name: dc1
    size: 3

stargate:
  enabled: false
  replicas: 1
  clusterVersion: "3.11"
  containerImage: "auto" # chooses image based on clusterVersion
  cassandraUser:
    secret: ""
    username: ""

repair:
  reaper:
    autoschedule: false
    enabled: true
    image:
      repository: docker.io/thelastpickle/cassandra-reaper
      tag: 2.1.3
    cassandraUser:
      secret: ""
      username: ""
    jmx:
      # -- Username that Reaper will use for JMX access. If left blank a random,
      # alphanumeric string will be generated.
      username: ""

      # -- Password that Reaper will use for JMX access. If left blank a random,
      # alphanumeric string will be generated.
      password: ""

backupRestore:
  medusa:
    enabled: false
    image:
      repository: docker.io/k8ssandra/medusa
      tag: 6ab6a55541e9
      pullPolicy: IfNotPresent

    cassandraUser:
      secret: "cassandra"
      username: "cassandra"

    multiTenant: false
    storage: s3
    bucketName: "k8ssandra-medusa-dev"
    bucketSecret: medusa-bucket-key

monitoring:
  grafana:
    # -- Enables the creation of configmaps containing Grafana dashboards. If
    # leveraging the kube prometheus stack sub-chart this value should be
    # `true`.
    provision_dashboards: true

  prometheus:
    # -- Enabes the creation of Prometheus Operator ServiceMonitor custom
    # resources. If you are not using the kube prometheus stack sub-chart or do
    # not have the ServiceMonitor CRD installed on your cluster, set this value
    # to `false`.
    provision_service_monitors: true

ingress:
  traefik:
    # -- Enable Traefik custom resources as part of this release.
    enabled: true

    # Repair service
    repair:
      # -- Enables Reaper Traefik ingress definitions. Note this will **only**
      # work if `ingress.traefik.enabled` is also `true`
      enabled: true

      # -- Traefik entrypoints where traffic is sourced.
      entrypoints:
        - web

      # -- Hostname Traefik should use for routing requests to the repair UI. If
      # using a local deployment consider leveraging dynamic DNS services like
      # xip.io. Example: `repair.127.0.0.1.xip.io` will return `127.0.0.1` for
      # DNS requests routing requests to your local machine.
      host: repair.k8ssandra.cluster.local

    # Cassandra native transport ingress support
    cassandra:
      # -- Enables Cassandra Traefik ingress definitions. Note this will
      # **only** work if `ingress.traefik.enabled` is also `true`. Additionally,
      # this is mutually exclusive with
      # ingress.traefik.stargate.cassandra.enabled
      enabled: true

      # -- Traefik entrypoints where traffic is sourced.
      entrypoints:
        - cassandra

    # Stargate ingress support
    stargate:
      # -- Enables Stargate Traefik ingress definitions. Note this will **only**
      # work if `ingress.traefik.enabled` is also `true`. Additionally, when
      # enabled the authentication API (port 8081) is enabled automatically.
      enabled: false

      # -- Hostname Traefik should use for routing requests to the repair UI. If
      # using a local deployment consider leveraging dynamic DNS services like
      # xip.io. Example: `repair.127.0.0.1.xip.io` will return `127.0.0.1` for
      # DNS requests routing requests to your local machine.
      host: stargate.k8ssandra.cluster.local

      # Ingress for each Stargate API can be enabled/disabled independently
      graphql:
        # -- Enables ingress resources for Stargate GraphQL API. Note this will
        # **only** work if `stargate.enabled`, `ingress.traefik.enabled`, and
        # `ingress.traefik.stargate.enabled` are also `true`
        enabled: true
        
        playground:
          # -- Enables GraphQL playground interface ingress.
          enabled: false
      
      rest:
        # -- Enables ingress resources for Stargate REST API. Note this will
        # **only** work if `stargate.enabled`, `ingress.traefik.enabled`, and
        # `ingress.traefik.stargate.enabled` are also `true`
        enabled: true

      cassandra:
        # -- Enables Traefik ingress resources for Stargate Cassandra API. Note
        # this will **only** work if `stargate.enabled`,
        # `ingress.traefik.enabled`, and `ingress.traefik.stargate.enabled` are
        # also `true`. Additionally, this is mutually exclusive with
        # ingress.traefik.cassandra.enabled
        enabled: false
        entrypoints:
          - cassandra

cleaner:
  image: k8ssandra/k8ssandra-cleaner:618b8ff9d368

cass-operator:
  # -- Enables the cass-operator as part of this release. If this setting is
  # disabled no Cassandra resources will be deployed.
  enabled: true

reaper-operator:
  # -- Enables the reaper-operator as part of this release. If this setting is
  # disabled no repair resources will be deployed.
  enabled: true

# Configuration values for the kube-prometheus-stack chart. Not all values are
# provided here for an exhaustive list see:
# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
kube-prometheus-stack:
  # -- Controls whether the kube-prometheus-stack chart is used at all.
  # Disabling this parameter prevents all monitoring components from being
  # installed.
  enabled: false

  # Disable default service monitors
  coreDns:
    enabled: false
  kubeApiServer:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeProxy:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeStateMetrics:
    enabled: false
  kubelet:
    enabled: false
  nodeExporter:
    enabled: false

  alertmanager:
    # Disabled for now while we build out a set of default alerts
    enabled: false
    serviceMonitor:
      selfMonitor: false

  prometheusOperator:
    # Installs the Prometheus Operator, omitting this parameter will result in
    # resources not being deployed.
    enabled: true

    # -- Locks Prometheus operator to this namespace. Changing this setting may
    # result in a non-namespace scoped deployment.
    namespaces:
      releaseNamespace: true
      additional: []

    # -- Monitoring of prometheus operator
    serviceMonitor:
      selfMonitor: false

  prometheus:
    # -- Provisions an instance of Prometheus as part of this release
    enabled: false

    # -- Allows for tweaking of the Prometheus installation's configuration.
    # Common parameters include `externalUrl: http://localhost:9090/prometheus`
    # and `routePrefix: /prometheus` for running Prometheus resources under a
    # specific path (`/prometheus` in this example).
    prometheusSpec:
      # -- Prefixes all Prometheus routes with the specified value. It is useful
      # for ingresses which do not rewrite URLs.
      routePrefix: /

      # -- An external URL at which Prometheus will be reachable.
      externalUrl: ""

    ingress:
      # -- Enable templating of ingress resources for external prometheus
      # traffic
      enabled: true
      # -- Path-based routing rules, `/prometheus` is possible if the
      # appropriate changes are made to `prometheusSpec`
      paths: []

    serviceMonitor:
      # Disable monitoring the Prometheus instance
      selfMonitor: false

  grafana:
    # -- Provisions an instance of Grafana and wires it up with a DataSource
    # referencing this Prometheus installation
    enabled: false
    ingress:
      # -- Generates ingress resources for the Grafana instance
      enabled: true

      # -- Path-based routing rules, '/grafana' is possible if appropriate
      # changes are made to `grafana.ini`
      path:

    # -- Username for accessing the provisioned Grafana instance
    adminUser: admin

    # -- Password for accessing the provisioned Grafana instance
    adminPassword: secret

    serviceMonitor:
      # -- Whether the Grafana instance should be monitored
      selfMonitor: false

    # -- Default dashboard installation
    defaultDashboardsEnabled: false

    # -- Additional plugins to be installed during Grafana startup,
    # `grafana-polystat-panel` is used by the default Cassandra dashboards.
    plugins:
      - grafana-polystat-panel

    # -- Customization of the Grafana instance. To listen for Grafana traffic
    # under a different url set `server.root_url: http://localhost:3000/grafana`
    # and `serve_from_sub_path: true`.
    grafana.ini: {}

